{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kentaroyoshizumi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // https://redux-form.com/7.3.0/docs/api/field.md/\n// https://redux-form.com/7.3.0/docs/api/reduxform.md/\n\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport RaisedButton from 'material-ui/RaisedButton'; // https://v0.material-ui.com/v0.20.0/#/components/text-field\n\nimport TextField from 'material-ui/TextField';\nimport { postEvent } from '../actions';\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props); // 本classに従属するメソッドにpropsを紐付ける(当該メソッドでpropsを利用する)ために\n    // constructorで当該メソッドをbindしています。\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const {\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error\n      }\n    } = field;\n    return /*#__PURE__*/_jsxDEV(TextField, {\n      hintText: label,\n      floatingLabelText: label,\n      type: type,\n      errorText: touched && error,\n      ...input,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push('/');\n  }\n\n  render() {\n    const {\n      handleSubmit,\n      pristine,\n      submitting,\n      invalid\n    } = this.props;\n    const style = {\n      margin: 12\n    };\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\",\n          component: this.renderField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Body\",\n          name: \"body\",\n          type: \"text\",\n          component: this.renderField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RaisedButton, {\n        label: \"Submit\",\n        type: \"submit\",\n        style: style,\n        disabled: pristine || submitting || invalid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RaisedButton, {\n        label: \"Cancel\",\n        style: style,\n        containerElement: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 70\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst validate = values => {\n  const errors = {}; // タイトルが無かったらエラー\n\n  if (!values.title) errors.title = \"Enter a title, please.\"; // ボディーが無かったらエラー\n\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n}; // コンポーネントをreduxFormでwrapする(decorateするとも言ったりします)ことで\n// コンポーネントのpropsが拡張され、pristine、submitting、invalid等の属性が追加されます。\n\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: 'eventNewForm'\n})(EventsNew));","map":{"version":3,"sources":["/Users/kentaroyoshizumi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","RaisedButton","TextField","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","pristine","submitting","invalid","style","margin","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n// https://redux-form.com/7.3.0/docs/api/field.md/\n// https://redux-form.com/7.3.0/docs/api/reduxform.md/\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton'\n// https://v0.material-ui.com/v0.20.0/#/components/text-field\nimport TextField from 'material-ui/TextField'\n\nimport { postEvent } from '../actions'\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props)\n\n    // 本classに従属するメソッドにpropsを紐付ける(当該メソッドでpropsを利用する)ために\n    // constructorで当該メソッドをbindしています。\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error } } = field\n\n    return (\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values)\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props\n    const style = { margin: 12 }\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField} /></div>\n        <div><Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField} /></div>\n\n        {/* 以下のいずれかに該当する場合はSubmitボタンが非活性状態となります。 */}\n        {/* - 初期値と同じ場合 */}\n        {/* - 送信中の場合 */}\n        {/* - バリデーションエラーが有る場合 */}\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />}/>\n      </form>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  // タイトルが無かったらエラー\n  if (!values.title) errors.title = \"Enter a title, please.\"\n\n  // ボディーが無かったらエラー\n  if (!values.body) errors.body = \"Enter a body, please.\"\n\n  return errors\n}\n\nconst mapDispatchToProps = { postEvent }\n\n// コンポーネントをreduxFormでwrapする(decorateするとも言ったりします)ことで\n// コンポーネントのpropsが拡張され、pristine、submitting、invalid等の属性が追加されます。\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({ validate, form: 'eventNewForm' })(EventsNew)\n)"]},"metadata":{},"sourceType":"module"}