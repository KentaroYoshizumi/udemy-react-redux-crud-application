{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kentaroyoshizumi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { postEvent } from '../actions';\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const {\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error\n      }\n    } = field;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...input,\n        placeholder: label,\n        type: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), \"\\u3000\", touched && error && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this);\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push('/');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Title\",\n          name: \"title\",\n          type: \"text\",\n          component: this.renderField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Body\",\n          name: \"body\",\n          type: \"text\",\n          component: this.renderField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"submit\",\n          disabled: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n  if (!values.title) errors.title = \"Enter a title, please.\";\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n};\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: 'eventNewForm'\n})(EventsNew));","map":{"version":3,"sources":["/Users/kentaroyoshizumi/Desktop/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { connect } from 'react-redux'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { postEvent } from '../actions' \n\nclass EventsNew extends Component {\n\n  constructor(props) {\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error } } = field\n\n    return (\n    <div>\n      <input {...input} placeholder={label} type={type} />\n    ã€€{touched && error && <span>{error}</span>}\n    </div>\n    )\n  }\n\nasync onSubmit(values) {\n  await this.props.postEvent(values)\n  this.props.history.push('/')\n}\n\n  render() {\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div>\n          <Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField} />\n        </div>\n        <div>\n          <Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField} />\n        </div>\n\n        <div>\n          <input type=\"submit\" value=\"submit\" disabled={false} />\n          <Link to=\"/\">Cancel</Link>\n        </div>\n      </form>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  if (!values.title) errors.title = \"Enter a title, please.\" \n  if (!values.body) errors.body = \"Enter a body, please.\" \n\n  return errors\n}\n\nconst mapDispatchToProps = ({ postEvent })\n\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({ validate, form: 'eventNewForm' })(EventsNew)\n)\n"]},"metadata":{},"sourceType":"module"}